generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  phone         String?
  branch        String?
  year          Int?
  username      String?            @unique
  image         String?
  role          String?            @default("user")
  bio           String?
  isAdmin       Boolean            @default(false)
  emailVerified DateTime?
  github        String             @default("/")
  linkedin      String?            @default("/")
  accounts      Account[]
  Certificate   Certificate[]
  Events        EventParticipant[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Certificate {
  id      String           @id @unique @default(cuid())
  userId  String
  date    DateTime         @default(now())
  type    CertificateTypes
  eventId Int
  desc    String?
  event   Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model Event {
  id           Int                @id @unique @default(autoincrement())
  name         String
  date         DateTime
  isAvailable  Boolean            @default(true)
  attended     Int
  type         EventTypes
  images       Json?
  organizer    String
  description  String
  amount       Int?               @default(0)
  filter       EventFilter
  certificates Certificate[]
  participants EventParticipant[]

  @@index([name])
}

model EventParticipant {
  eventId Int
  userId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Team {
  id        Int     @id @unique @default(autoincrement())
  // custid    String  @unique
  email     String  @unique
  name      String
  branch    String
  role      String
  linkedin  String?
  github    String?
  imageLink String?
}

enum CertificateTypes {
  Participation
  Winner
  RunnerUp
  SpecialRecognition
  Volunteer
}

enum EventTypes {
  Workshop
  Seminar
  Gaming
  Talk
  CyberSecurity
  OpenSource
  AndroidDevelopment
  WebDevelopment
  Hackathon
  CodingContest
}

enum EventFilter {
  Year2017to2020
  Year2020to2021
  Year2021to2022
  Year2022to2023
  Year2023to2024
}
